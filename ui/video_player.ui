<?xml version="1.0" encoding="UTF-8"?>
<ui version="4.0">
 <class>MainWindow</class>
 <widget class="QMainWindow" name="MainWindow">
  <property name="geometry">
   <rect>
    <x>0</x>
    <y>0</y>
    <width>847</width>
    <height>578</height>
   </rect>
  </property>
  <property name="windowTitle">
   <string>MainWindow</string>
  </property>
  <property name="styleSheet">
   <string notr="true">/*ElegantDark Style Sheet for QT Applications
Author: Jaime A. Quiroga P.
Company: GTRONICK
Last updated: 17/04/2018
Available at: https://github.com/GTRONICK/QSS/blob/master/ElegantDark.qss
*/
QMainWindow {
  background-color:rgb(66,66,66);

  border-radius: 10px;
}

QTextEdit {
  background-color:rgb(42, 42, 42);
  color: rgb(0, 255, 0);
}
QPushButton{
  border-style: outset;
  border-width: 2px;
  border-top-color: qlineargradient(spread:pad, x1:0.5, y1:0.6, x2:0.5, y2:0.4, stop:0 rgba(115, 115, 115, 255), stop:1 rgba(62, 62, 62, 255));
  border-right-color: qlineargradient(spread:pad, x1:0.4, y1:0.5, x2:0.6, y2:0.5, stop:0 rgba(115, 115, 115, 255), stop:1 rgba(62, 62, 62, 255));
  border-left-color: qlineargradient(spread:pad, x1:0.6, y1:0.5, x2:0.4, y2:0.5, stop:0 rgba(115, 115, 115, 255), stop:1 rgba(62, 62, 62, 255));
  border-bottom-color: rgb(58, 58, 58);
  border-bottom-width: 1px;
  border-style: solid;
  color: rgb(255, 255, 255);
  padding: 2px;
  background-color: qlineargradient(spread:pad, x1:0.5, y1:1, x2:0.5, y2:0, stop:0 rgba(77, 77, 77, 255), stop:1 rgba(97, 97, 97, 255));
}
QPushButton:hover{
  border-style: outset;
  border-width: 2px;
  border-top-color: qlineargradient(spread:pad, x1:0.5, y1:0.6, x2:0.5, y2:0.4, stop:0 rgba(180, 180, 180, 255), stop:1 rgba(110, 110, 110, 255));
  border-right-color: qlineargradient(spread:pad, x1:0.4, y1:0.5, x2:0.6, y2:0.5, stop:0 rgba(180, 180, 180, 255), stop:1 rgba(110, 110, 110, 255));
  border-left-color: qlineargradient(spread:pad, x1:0.6, y1:0.5, x2:0.4, y2:0.5, stop:0 rgba(180, 180, 180, 255), stop:1 rgba(110, 110, 110, 255));
  border-bottom-color: rgb(115, 115, 115);
  border-bottom-width: 1px;
  border-style: solid;
  color: rgb(255, 255, 255);
  padding: 2px;
  background-color: qlineargradient(spread:pad, x1:0.5, y1:1, x2:0.5, y2:0, stop:0 rgba(107, 107, 107, 255), stop:1 rgba(157, 157, 157, 255));
}

QPushButton:disabled{
  border-style: outset;
  border-width: 2px;
  border-top-color: qlineargradient(spread:pad, x1:0.5, y1:0.6, x2:0.5, y2:0.4, stop:0 rgba(115, 115, 115, 255), stop:1 rgba(62, 62, 62, 255));
  border-right-color: qlineargradient(spread:pad, x1:0.4, y1:0.5, x2:0.6, y2:0.5, stop:0 rgba(115, 115, 115, 255), stop:1 rgba(62, 62, 62, 255));
  border-left-color: qlineargradient(spread:pad, x1:0.6, y1:0.5, x2:0.4, y2:0.5, stop:0 rgba(115, 115, 115, 255), stop:1 rgba(62, 62, 62, 255));
  border-bottom-color: rgb(58, 58, 58);
  border-bottom-width: 1px;
  border-style: solid;
  color: rgb(0, 0, 0);
  padding: 2px;
  background-color: qlineargradient(spread:pad, x1:0.5, y1:1, x2:0.5, y2:0, stop:0 rgba(57, 57, 57, 255), stop:1 rgba(77, 77, 77, 255));
}
QLineEdit {
  border-width: 1px; border-radius: 4px;
  border-color: rgb(58, 58, 58);
  border-style: inset;
  padding: 0 8px;
  color: rgb(255, 255, 255);
  background:rgb(100, 100, 100);
  selection-background-color: rgb(187, 187, 187);
  selection-color: rgb(60, 63, 65);
}
QLabel {
  color:rgb(255,255,255); 
}
QProgressBar {
  text-align: center;
  color: rgb(240, 240, 240);
  border-width: 1px; 
  border-radius: 3px;
  border-color: rgb(58, 58, 58);
  border-style: inset;
  background-color:rgb(77,77,77);
}
QProgressBar::chunk {
  background-color: qlineargradient(spread:pad, x1:0.5, y1:0.7, x2:0.5, y2:0.3, stop:0 rgba(87, 97, 106, 255), stop:1 rgba(93, 103, 113, 255));
  border-radius: 5px;
}
QMenuBar {
  background:rgb(82, 82, 82);
}
QMenuBar::item {
  color:rgb(223,219,210);
  spacing: 3px;
  padding: 1px 4px;
  background: transparent;
}

QMenuBar::item:selected {
  background:rgb(115, 115, 115);
}
QMenu::item:selected {
  color:rgb(255,255,255);
  border-width:2px;
  border-style:solid;
  padding-left:18px;
  padding-right:8px;
  padding-top:2px;
  padding-bottom:3px;
  background:qlineargradient(spread:pad, x1:0.5, y1:0.7, x2:0.5, y2:0.3, stop:0 rgba(87, 97, 106, 255), stop:1 rgba(93, 103, 113, 255));
  border-top-color: qlineargradient(spread:pad, x1:0.5, y1:0.6, x2:0.5, y2:0.4, stop:0 rgba(115, 115, 115, 255), stop:1 rgba(62, 62, 62, 255));
  border-right-color: qlineargradient(spread:pad, x1:0.4, y1:0.5, x2:0.6, y2:0.5, stop:0 rgba(115, 115, 115, 255), stop:1 rgba(62, 62, 62, 255));
  border-left-color: qlineargradient(spread:pad, x1:0.6, y1:0.5, x2:0.4, y2:0.5, stop:0 rgba(115, 115, 115, 255), stop:1 rgba(62, 62, 62, 255));
  border-bottom-color: rgb(58, 58, 58);
  border-bottom-width: 1px;
}
QMenu::item {
  color:rgb(223,219,210);
  background-color:rgb(78,78,78);
  padding-left:20px;
  padding-top:4px;
  padding-bottom:4px;
  padding-right:10px;
}
QMenu{
  background-color:rgb(78,78,78);
}

QScrollArea{
    border-color: rgb(77,77,77);
    background-color:rgb(101,101,101);
    border-style: solid;
    border-width: 1px;
      border-radius: 6px;
}

QSplitter{
    border-color: rgb(77,77,77);
    background-color:rgb(101,101,101);
    border-style: solid;
    border-width: 1px;
      border-radius: 2px;
}

QTabWidget {
  color:rgb(0,0,0);
  background-color:rgb(247,246,246);
}
QTabWidget::pane {
    border-color: rgb(77,77,77);
    background-color:rgb(101,101,101);
    border-style: solid;
    border-width: 1px;
      border-radius: 6px;

}
QTabBar::tab {
  padding:2px;
  color:rgb(250,250,250);
    background-color: qlineargradient(spread:pad, x1:0.5, y1:1, x2:0.5, y2:0, stop:0 rgba(77, 77, 77, 255), stop:1 rgba(97, 97, 97, 255));
  border-style: solid;
  border-width: 2px;
    border-top-right-radius:4px;
    border-top-left-radius:4px;
  border-top-color: qlineargradient(spread:pad, x1:0.5, y1:0.6, x2:0.5, y2:0.4, stop:0 rgba(115, 115, 115, 255), stop:1 rgba(95, 92, 93, 255));
  border-right-color: qlineargradient(spread:pad, x1:0.4, y1:0.5, x2:0.6, y2:0.5, stop:0 rgba(115, 115, 115, 255), stop:1 rgba(95, 92, 93, 255));
  border-left-color: qlineargradient(spread:pad, x1:0.6, y1:0.5, x2:0.4, y2:0.5, stop:0 rgba(115, 115, 115, 255), stop:1 rgba(95, 92, 93, 255));
  border-bottom-color: rgb(101,101,101);
}
QTabBar::tab:selected, QTabBar::tab:last:selected, QTabBar::tab:hover {
    background-color:rgb(101,101,101);
    margin-left: 0px;
    margin-right: 1px;
}
QTabBar::tab:!selected {
      margin-top: 1px;
    margin-right: 1px;
}
QCheckBox {
  color:rgb(223,219,210);
  padding: 2px;
}
QCheckBox:hover {
  border-radius:4px;
  border-style:solid;
  padding-left: 1px;
  padding-right: 1px;
  padding-bottom: 1px;
  padding-top: 1px;
  border-width:1px;
  border-color: rgb(87, 97, 106);
  background-color:qlineargradient(spread:pad, x1:0.5, y1:0.7, x2:0.5, y2:0.3, stop:0 rgba(87, 97, 106, 150), stop:1 rgba(93, 103, 113, 150));
}
QCheckBox::indicator:checked {
  border-radius:4px;
  border-style:solid;
  border-width:1px;
  border-color: rgb(180,180,180);
    background-color:qlineargradient(spread:pad, x1:0.5, y1:0.7, x2:0.5, y2:0.3, stop:0 rgba(87, 97, 106, 255), stop:1 rgba(93, 103, 113, 255));
}
QCheckBox::indicator:unchecked {
  border-radius:4px;
  border-style:solid;
  border-width:1px;
  border-color: rgb(87, 97, 106);
    background-color:rgb(255,255,255);
}
QStatusBar {
  color:rgb(240,240,240);
}</string>
  </property>
  <property name="documentMode">
   <bool>false</bool>
  </property>
  <property name="tabShape">
   <enum>QTabWidget::Triangular</enum>
  </property>
  <property name="dockNestingEnabled">
   <bool>true</bool>
  </property>
  <widget class="QWidget" name="centralwidget">
   <property name="sizePolicy">
    <sizepolicy hsizetype="Expanding" vsizetype="Expanding">
     <horstretch>0</horstretch>
     <verstretch>0</verstretch>
    </sizepolicy>
   </property>
   <layout class="QVBoxLayout" name="verticalLayout_2">
    <property name="spacing">
     <number>0</number>
    </property>
    <property name="leftMargin">
     <number>0</number>
    </property>
    <property name="topMargin">
     <number>0</number>
    </property>
    <property name="rightMargin">
     <number>0</number>
    </property>
    <property name="bottomMargin">
     <number>0</number>
    </property>
    <item>
     <layout class="QVBoxLayout" name="layout">
      <property name="spacing">
       <number>0</number>
      </property>
      <property name="leftMargin">
       <number>4</number>
      </property>
      <property name="topMargin">
       <number>0</number>
      </property>
      <property name="rightMargin">
       <number>4</number>
      </property>
      <property name="bottomMargin">
       <number>4</number>
      </property>
      <item>
       <layout class="QVBoxLayout" name="verticalLayout">
        <item>
         <widget class="QFrame" name="frame_2">
          <property name="minimumSize">
           <size>
            <width>0</width>
            <height>54</height>
           </size>
          </property>
          <property name="styleSheet">
           <string notr="true">QFrame {
    /* Background color */
    background-color: rgb(88, 88, 98);  /* Light gray background */

    /* Border properties */
    border-style: solid;
    border-width: 2px;
    border-color: #000000; /* Black border */

    /* Rounded corners */
    border-radius: 10px;

    /* Shadow (optional) */
    /* Note: This will only work in QWidget subclasses with the 'frame' attribute set */

    /* Size constraints (optional) */
    min-height: 50px;
}
</string>
          </property>
          <property name="frameShape">
           <enum>QFrame::NoFrame</enum>
          </property>
          <property name="frameShadow">
           <enum>QFrame::Raised</enum>
          </property>
          <layout class="QVBoxLayout" name="verticalLayout_3">
           <item>
            <widget class="QVideoWidget" name="videoWidget" native="true">
             <property name="sizePolicy">
              <sizepolicy hsizetype="Preferred" vsizetype="Preferred">
               <horstretch>0</horstretch>
               <verstretch>0</verstretch>
              </sizepolicy>
             </property>
             <property name="styleSheet">
              <string notr="true">    border: 10px groove rgb(22,22,22);
    border-radius: 10px;</string>
             </property>
            </widget>
           </item>
          </layout>
         </widget>
        </item>
       </layout>
      </item>
      <item>
       <spacer name="horizontalSpacer">
        <property name="orientation">
         <enum>Qt::Horizontal</enum>
        </property>
        <property name="sizeType">
         <enum>QSizePolicy::Preferred</enum>
        </property>
        <property name="sizeHint" stdset="0">
         <size>
          <width>40</width>
          <height>5</height>
         </size>
        </property>
       </spacer>
      </item>
      <item>
       <widget class="QSlider" name="slider">
        <property name="minimumSize">
         <size>
          <width>3</width>
          <height>35</height>
         </size>
        </property>
        <property name="styleSheet">
         <string notr="true">QSlider::groove:horizontal {
    border-image: url(images/movie_groove_long.png) ; /* Adjust slicing and stretch as needed */
    height: 31px; /* The height of your image */
}

QSlider::handle:horizontal {
    background-image: url(images/handle_off.png); /* The path to your handle image */
	background-repeat: no-repeat;
    border: none; /* Remove the border if you don't need it */
    width: 32px; /* Width of the handle - adjust as needed */
    height: 32px; /* Height of the handle - adjust as needed */
    margin: -1px 0; /* Optional: Adjust the margin if needed */
}

QSlider::handle:horizontal:hover {

    background-image: url(images/handle_hover.png); /* Change the handle image when hovering */
background-repeat: no-repeat;
    border: none; /* Remove the border if you don't need it */
    width: 32px; /* Width of the handle - adjust as needed */
    height: 32px; /* Height of the handle - adjust as needed */
    margin: -1px 0; /* Optional: Adjust the margin if needed */
}

QSlider::handle:horizontal:pressed {
    background-image: url(images/handle_on.png); /* Change the handle image when pressed */
background-repeat: no-repeat;
    border: none; /* Remove the border if you don't need it */
    width: 32px; /* Width of the handle - adjust as needed */
    height: 32px; /* Height of the handle - adjust as needed */
    margin: -1px 0; /* Optional: Adjust the margin if needed */
 	
}</string>
        </property>
        <property name="orientation">
         <enum>Qt::Horizontal</enum>
        </property>
       </widget>
      </item>
      <item>
       <widget class="QFrame" name="frame">
        <property name="minimumSize">
         <size>
          <width>0</width>
          <height>0</height>
         </size>
        </property>
        <property name="maximumSize">
         <size>
          <width>16777215</width>
          <height>50</height>
         </size>
        </property>
        <property name="frameShape">
         <enum>QFrame::StyledPanel</enum>
        </property>
        <property name="frameShadow">
         <enum>QFrame::Raised</enum>
        </property>
        <layout class="QHBoxLayout" name="horizontalLayout">
         <property name="leftMargin">
          <number>0</number>
         </property>
         <property name="topMargin">
          <number>0</number>
         </property>
         <property name="rightMargin">
          <number>0</number>
         </property>
         <property name="bottomMargin">
          <number>0</number>
         </property>
         <item>
          <spacer name="horizontalSpacer_2">
           <property name="orientation">
            <enum>Qt::Horizontal</enum>
           </property>
           <property name="sizeHint" stdset="0">
            <size>
             <width>58</width>
             <height>20</height>
            </size>
           </property>
          </spacer>
         </item>
         <item>
          <widget class="QFrame" name="frame_3">
           <property name="minimumSize">
            <size>
             <width>671</width>
             <height>0</height>
            </size>
           </property>
           <property name="maximumSize">
            <size>
             <width>16777215</width>
             <height>50</height>
            </size>
           </property>
           <property name="styleSheet">
            <string notr="true">background-color:rgb(66,66,66);</string>
           </property>
           <property name="frameShape">
            <enum>QFrame::StyledPanel</enum>
           </property>
           <property name="frameShadow">
            <enum>QFrame::Raised</enum>
           </property>
           <widget class="QPushButton" name="save_video_to_file">
            <property name="geometry">
             <rect>
              <x>16</x>
              <y>8</y>
              <width>42</width>
              <height>34</height>
             </rect>
            </property>
            <property name="sizePolicy">
             <sizepolicy hsizetype="Preferred" vsizetype="Preferred">
              <horstretch>0</horstretch>
              <verstretch>0</verstretch>
             </sizepolicy>
            </property>
            <property name="minimumSize">
             <size>
              <width>0</width>
              <height>0</height>
             </size>
            </property>
            <property name="maximumSize">
             <size>
              <width>38</width>
              <height>32</height>
             </size>
            </property>
            <property name="styleSheet">
             <string notr="true">QPushButton {
    /* Normal state */
    background-image: url(images/Folder_off.png);
    background-position: left top;
    background-repeat: no-repeat;
    border: none;
    border-radius: 0px;
}

QPushButton:hover {
    /* Hovered state */
    background-image: url(images/Folder_hover.png);
    background-position: left top;
    background-repeat: no-repeat;
    border: none;
}

QPushButton:pressed {
    /* Pressed state */
    background-image: url(images/Folder_active.png);
    background-position: left top;
    background-repeat: no-repeat;
    border: none;
}</string>
            </property>
            <property name="text">
             <string/>
            </property>
            <property name="iconSize">
             <size>
              <width>38</width>
              <height>32</height>
             </size>
            </property>
           </widget>
           <widget class="QPushButton" name="restore_original_size">
            <property name="geometry">
             <rect>
              <x>435</x>
              <y>8</y>
              <width>225</width>
              <height>35</height>
             </rect>
            </property>
            <property name="sizePolicy">
             <sizepolicy hsizetype="Preferred" vsizetype="Preferred">
              <horstretch>0</horstretch>
              <verstretch>0</verstretch>
             </sizepolicy>
            </property>
            <property name="minimumSize">
             <size>
              <width>60</width>
              <height>35</height>
             </size>
            </property>
            <property name="font">
             <font>
              <pointsize>12</pointsize>
              <bold>true</bold>
             </font>
            </property>
            <property name="styleSheet">
             <string notr="true">QPushButton {
    background-color: rgb(64, 64, 64); /* Matching the tab's base color */
    border: none;
    border-radius: 5px; /* Consistent with the tab's rounded corners */
    padding: 6px 2px; /* Comfortable padding for the button text */
    color: white; /* White text for contrast */
    text-align: center;
}

QPushButton:hover {
    background-color: rgb(96, 96, 96); /* Lighter grey, similar to tab hover effect */
}

QPushButton:pressed {
    background-color: rgb(128, 128, 128); /* Similar to the selected tab color */
}
</string>
            </property>
            <property name="text">
             <string>Restore Original Video Size</string>
            </property>
           </widget>
           <widget class="QPushButton" name="paus_button">
            <property name="geometry">
             <rect>
              <x>158</x>
              <y>8</y>
              <width>35</width>
              <height>33</height>
             </rect>
            </property>
            <property name="sizePolicy">
             <sizepolicy hsizetype="Preferred" vsizetype="Preferred">
              <horstretch>0</horstretch>
              <verstretch>0</verstretch>
             </sizepolicy>
            </property>
            <property name="minimumSize">
             <size>
              <width>35</width>
              <height>33</height>
             </size>
            </property>
            <property name="maximumSize">
             <size>
              <width>34</width>
              <height>33</height>
             </size>
            </property>
            <property name="tabletTracking">
             <bool>false</bool>
            </property>
            <property name="styleSheet">
             <string notr="true">
QPushButton {
   border-image: url(images/paus_off.png); /* Change the handle image when hovering */
    border: none; /* Remove the border if you don't need it */
    width: 34px; /* Width of the handle - adjust as needed */
    height: 33px; /* Height of the handle - adjust as needed */
}
QPushButton:hover {
   border-image: url(images/paus_hover.png); /* Change the handle image when hovering */
    border: none; /* Remove the border if you don't need it */
    width: 34px; /* Width of the handle - adjust as needed */
    height: 33px; /* Height of the handle - adjust as needed */
}
QPushButton:pressed {
   border-image: url(images/paus_active.png); /* Change the handle image when hovering */
    border: none; /* Remove the border if you don't need it */
    width: 34px; /* Width of the handle - adjust as needed */
    height: 33px; /* Height of the handle - adjust as needed */
}</string>
            </property>
            <property name="text">
             <string/>
            </property>
            <property name="iconSize">
             <size>
              <width>34</width>
              <height>33</height>
             </size>
            </property>
           </widget>
           <widget class="QPushButton" name="play_button">
            <property name="geometry">
             <rect>
              <x>296</x>
              <y>8</y>
              <width>34</width>
              <height>33</height>
             </rect>
            </property>
            <property name="sizePolicy">
             <sizepolicy hsizetype="Preferred" vsizetype="Preferred">
              <horstretch>0</horstretch>
              <verstretch>0</verstretch>
             </sizepolicy>
            </property>
            <property name="minimumSize">
             <size>
              <width>34</width>
              <height>33</height>
             </size>
            </property>
            <property name="maximumSize">
             <size>
              <width>35</width>
              <height>33</height>
             </size>
            </property>
            <property name="tabletTracking">
             <bool>false</bool>
            </property>
            <property name="autoFillBackground">
             <bool>false</bool>
            </property>
            <property name="styleSheet">
             <string notr="true">
QPushButton {
   border-image: url(images/play_off.png); /* Change the handle image when hovering */
    border: 0; /* Remove the border if you don't need it */
    width: 34px; /* Width of the handle - adjust as needed */
    height: 33px; /* Height of the handle - adjust as needed */
}
QPushButton:hover {
   border-image: url(images/play_hover.png); /* Change the handle image when hovering */
    border: 0; /* Remove the border if you don't need it */
    width: 34px; /* Width of the handle - adjust as needed */
    height: 33px; /* Height of the handle - adjust as needed */
}
QPushButton:pressed {
   border-image: url(images/play_active.png); /* Change the handle image when hovering */
    border: 0; /* Remove the border if you don't need it */
    width: 34px; /* Width of the handle - adjust as needed */
    height: 33px; /* Height of the handle - adjust as needed */
}</string>
            </property>
            <property name="text">
             <string/>
            </property>
            <property name="iconSize">
             <size>
              <width>34</width>
              <height>33</height>
             </size>
            </property>
           </widget>
          </widget>
         </item>
         <item>
          <spacer name="horizontalSpacer_3">
           <property name="orientation">
            <enum>Qt::Horizontal</enum>
           </property>
           <property name="sizeHint" stdset="0">
            <size>
             <width>58</width>
             <height>20</height>
            </size>
           </property>
          </spacer>
         </item>
        </layout>
       </widget>
      </item>
     </layout>
    </item>
   </layout>
  </widget>
 </widget>
 <customwidgets>
  <customwidget>
   <class>QVideoWidget</class>
   <extends>QWidget</extends>
   <header>PySide6.QtMultimediaWidgets</header>
   <container>1</container>
  </customwidget>
 </customwidgets>
 <resources/>
 <connections/>
</ui>
